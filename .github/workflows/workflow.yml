name: Publish Python Package

on:
  push:
    branches:
      - master
    tags:
      - "v*"

jobs:
  test:
    strategy:
      matrix:
        python-version: ["3.9"]
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Poetry Lock File
        run: |
          poetry lock
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
      #----------------------------------------------
      # run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source $VENV
          poetry run pytest
  pypi-publish:
    strategy:
      matrix:
        python-version: ["3.9"]
        os: ["ubuntu-latest"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    needs: test
    permissions:
      id-token: write
    if: startsWith(github.ref, 'refs/tags/v') && github.event_name == 'push'
    steps:
      #----------------------------------------------
      # check-out repo and set-up python
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      # install & configure poetry
      #----------------------------------------------
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Poetry Lock File
        run: |
          poetry lock
      #----------------------------------------------
      # load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-pip-wheels
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
      #----------------------------------------------
      # use poetry to build packages with poetry-dynamic-versioning
      #----------------------------------------------
      - name: Build poetry packages
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry build
      - name: Upload packages to PyPI
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish --no-interaction -vvv
